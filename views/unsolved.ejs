<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title><%= __('unsolved.title') %></title>

  <!-- Bootstrap 5 (via CDN) -->
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
  />

  <!-- Google Fonts: Roboto -->
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap"
    rel="stylesheet"
  />

  <!-- Bootstrap Icons -->
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css"
  />

  <!-- Your existing style.css (if needed) -->
  <link rel="stylesheet" href="/css/style.css" />

  <style>
    /* Global Typography & Colors */
    body {
      font-family: 'Roboto', sans-serif;
      background-color: #f9fafb;
    }
    h1, h2, h3, h4, h5, h6 {
      font-weight: 700;
      color: #333;
    }

    /* Navbar Custom */
    .navbar-custom {
      background-color: #ffffff;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      padding: 0.75rem 0;
      width: 100%;
    }
    .navbar-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 15px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .navbar-brand {
      color: #333 !important;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      text-decoration: none;
    }
    .navbar-brand img {
      width: 32px;
      height: auto;
    }

    /* Modern search styling */
    .search {
      position: relative;
      width: 240px;
      transition: width 0.3s ease;
    }
    .search.active {
      width: 350px;
    }
    .modern-search {
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
      color: #495057;
      padding: 0.35rem 1rem;
      border-radius: 20px;
      font-size: 0.875rem;
      height: 32px;
      line-height: 1;
      outline: none;
      transition: all 0.2s;
    }
    .modern-search::placeholder {
      color: #adb5bd;
    }
    .modern-search:focus {
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    /* Search Results */
    .search-results {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      background: #fff;
      border-radius: 8px;
      margin-top: 5px;
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.05);
      z-index: 1050;
    }
    .search-results li {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding: 6px 12px;
      font-size: 0.875rem;
    }
    .search-results .result-snippet {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 100%;
      margin-top: 2px;
      font-size: 0.8125rem;
      color: #666;
    }
    .hover-bg-light:hover {
      background-color: #f8f9fa !important;
    }

    /* Language Switch Link */
    .language-switch {
      color: #333;
      text-decoration: none;
      font-weight: 500;
    }
    .language-switch:hover {
      text-decoration: underline;
    }

    /* Unsolved List */
    .unsolved-list {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px 15px;
    }

    /* Statistics Card */
    .statistics-section .card {
      border: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.04);
    }
    .statistics-section .card-body {
      background-color: #ffffff;
      border-radius: 8px;
    }
    .statistics-section .card-title {
      font-weight: 700;
    }

    /* Progress Container */
    .progress-container {
      flex: 0 0 200px;
      height: 16px;
      background-color: #f0f2f5;
      border-radius: 8px;
      overflow: hidden;
      position: relative;
      display: flex;
    }
    .progress-bar-both,
    .progress-bar-other,
    .progress-bar-current {
      height: 100%;
      transition: width 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    .progress-bar-both {
      background-color: #66bb6a;
    }
    .progress-bar-other {
      background-color: #64b5f6;
    }
    .progress-bar-current {
      background-color: #66bb6a;
    }

    .completion-text {
      color: #666;
      font-size: 0.9em;
      flex: 0 0 auto;
      min-width: 60px;
      text-align: right;
    }

    /* Chapter & Section Titles */
    .chapter-title {
      margin-top: 30px;
      margin-bottom: 10px;
      color: #333;
      font-weight: 700;
    }
    .section-header {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-top: 25px;
      flex-wrap: wrap;
    }
    .section-title {
      font-weight: 600;
      margin-right: auto;
      margin-bottom: 0;
      min-width: 230px;
      flex: 1;
      color: #444;
    }

    /* Pie Chart Container */
    .pie-chart-container {
      width: 30px;
      height: 30px;
      flex: 0 0 auto;
    }

    /* Problem Links */
    .problem-links {
      margin-top: 10px;
    }
    .problem-link {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      margin: 5px 6px;
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
      font-weight: 500;
      border-radius: 0.375rem;
      transition: all 0.2s ease;
      position: relative;
      overflow: hidden;
      cursor: pointer;
      text-decoration: none;
      border: 1px solid rgba(245, 158, 11, 0.3);
      background: linear-gradient(to right, rgba(245, 158, 11, 0.05), rgba(249, 115, 22, 0.05));
      color: #b45309;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    .problem-link:hover {
      border-color: rgba(245, 158, 11, 0.7);
      background: linear-gradient(to right, rgba(245, 158, 11, 0.1), rgba(249, 115, 22, 0.1));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .problem-link:focus-visible {
      outline: none;
      ring: 1px solid rgba(245, 158, 11, 0.5);
    }

    .problem-link.exists-other-lang {
      border: 1px solid rgba(59, 130, 246, 0.3);
      background: linear-gradient(to right, rgba(59, 130, 246, 0.05), rgba(37, 99, 235, 0.05));
      color: #1d4ed8;
    }

    .problem-link.exists-other-lang:hover {
      border-color: rgba(59, 130, 246, 0.7);
      background: linear-gradient(to right, rgba(59, 130, 246, 0.1), rgba(37, 99, 235, 0.1));
    }

    /* Dark mode support */
    @media (prefers-color-scheme: dark) {
      .problem-link {
        color: #fbbf24;
      }
      
      .problem-link.exists-other-lang {
        color: #60a5fa;
      }
    }

    p,
    span,
    a,
    li {
      font-size: 0.95rem;
      color: #555;
    }

    /* Footer */
    .footer-modern {
            background: linear-gradient(135deg, #343A40 0%, #495057 100%);
            color: #fff;
        }

        .footer-container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }
    .footer-modern a {
      color: #ffffff;
    }
    .footer-modern a:hover {
      text-decoration: underline;
    }
    .footer-modern p {
      font-size: 0.875rem;
      color: #ffffff;
    }
    

    @media (max-width: 991.98px) {
      .search {
        width: 100%;
      }
      .navbar-container {
        flex-wrap: wrap;
      }
      .navbar-brand {
        margin-bottom: 0.5rem;
      }
      .section-header {
        flex-direction: column;
        align-items: flex-start;
      }
      .progress-container {
        margin-top: 1rem;
      }
      .completion-text {
        margin-top: 0.5rem;
      }
    }
  </style>
</head>
<body>
  <!-- Top Navbar -->
  <nav class="navbar navbar-custom">
    <div class="navbar-container">
      <a class="navbar-brand" href="/">
        <img src="https://savchenkosolutions.com/img/book.png" alt="Savchenko Solutions" />
        Savchenko Solutions
      </a>

      <div class="d-flex align-items-center gap-3">
        <div class="search position-relative">
          <input
            type="text"
            id="searchInput"
            class="form-control form-control-sm modern-search"
            placeholder="Search"
            aria-label="Search"
          />
          <div
            id="searchResults"
            class="search-results position-absolute border rounded"
            style="display: none;"
          ></div>
        </div>
        <div>
          <% if (lang === 'en') { %>
            <a href="/ru/unsolved" class="language-switch">EN</a>
          <% } else { %>
            <a href="/en/unsolved" class="language-switch">RU</a>
          <% } %>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="unsolved-list">
    <h1 class="mb-4"><%= __('unsolved.title') %></h1>

    <!-- Statistics Section -->
    <div class="statistics-section mb-5">
      <div class="card">
        <div class="card-body">
          <div
            class="d-flex flex-wrap align-items-center justify-content-between mb-3"
          >
            <div>
              <h5 class="card-title mb-0">
                <%= __('unsolved.overallProgress') %>
              </h5>
              <p class="text-muted mb-2">
                <%= __('unsolved.totalSolved') %>:
                <%= totalUniqueSolutions %>/<%= totalProblems %>
              </p>
            </div>
            <div class="progress-container" style="width: 200px;">
              <div
                class="progress-bar-both"
                style="width: <%= (
                  (currentLangSolutions / totalProblems) *
                  100
                ).toFixed(1) %>%"
              ></div>
              <div
                class="progress-bar-other"
                style="width: <%= (
                  ((totalUniqueSolutions - currentLangSolutions) / totalProblems) *
                  100
                ).toFixed(1) %>%"
              ></div>
            </div>
          </div>
          <div class="row g-3">
            <div class="col-md-4">
              <div
                class="d-flex justify-content-between align-items-center"
              >
                <span><%= lang.toUpperCase() %> <%= __('unsolved.solutions') %>:</span>
                <strong><%= currentLangSolutions %></strong>
              </div>
            </div>
            <div class="col-md-4">
              <div
                class="d-flex justify-content-between align-items-center"
              >
                <span><%= (lang === 'en' ? 'RU' : 'EN') %> <%= __('unsolved.solutions') %>:</span>
                <strong><%= otherLangSolutions %></strong>
              </div>
            </div>
            <div class="col-md-4">
              <div
                class="d-flex justify-content-between align-items-center"
              >
                <span><%= __('unsolved.uniqueSolutions') %>:</span>
                <strong><%= totalUniqueSolutions %></strong>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <% 
      let currentChapter = null;
      let currentSection = null;
      let sectionProblems = [];

      unsolved.forEach(problem => {
        if (currentChapter !== problem.chapter) {
          // Display the last section's progress before starting a new chapter
          if (sectionProblems && sectionProblems.length > 0) {
    %>
      <div class="section-header">
        <h3 class="section-title">
          <%= __('unsolved.section') %> 
          <%= sectionProblems[0].chapterNum %>.<%= sectionProblems[0].sectionNum %>: 
          <%= currentSection %>
        </h3>
        <div class="pie-chart-container">
          <canvas
            id="pieChart-<%= sectionProblems[0].chapterNum %>-<%= sectionProblems[0].sectionNum %>"
          ></canvas>
        </div>
        <div class="progress-container">
          <% 
            const totalInSection = sectionProblems[0].maximum;
            const unsolvedCount = sectionProblems.length;
            const otherLangOnlyCount = sectionProblems.filter(p => p.existsInOtherLang).length;
            const solvedInBothCount = totalInSection - unsolvedCount - otherLangOnlyCount;
            const solvedInCurrentOnly = unsolvedCount - otherLangOnlyCount;
          %>
          <div
            class="progress-bar-current"
            style="width: <%= ((totalInSection - unsolvedCount) / totalInSection * 100) %>%"
          ></div>
          <div
            class="progress-bar-other"
            style="width: <%= (otherLangOnlyCount / totalInSection * 100) %>%"
          ></div>
        </div>
        <span class="completion-text">
          <%= (totalInSection - unsolvedCount) %>/<%= totalInSection %>
        </span>
      </div>
      <div class="problem-links mb-4">
        <% sectionProblems.forEach(prob => { %>
          <a
            href="/<%= prob.existsInOtherLang ? (lang === 'en' ? 'ru' : 'en') : lang %>/<%= prob.existsInOtherLang ? '' : 'upload#' %><%= prob.problem %>"
            class="problem-link <%= prob.existsInOtherLang ? 'exists-other-lang' : '' %>"
            title="<%= prob.existsInOtherLang ? __('unsolved.existsInOtherLang') : '' %>"
          >
            <%= prob.problem %>
          </a>
        <% }); %>
      </div>
    <% 
          }
          currentChapter = problem.chapter;
          currentSection = null;
          sectionProblems = [];
    %>
      <h2 class="chapter-title">
        <%= __('unsolved.chapter') %> 
        <%= problem.chapterNum %>: 
        <%= problem.chapter %>
      </h2>
    <% 
        }
        if (currentSection !== problem.section) {
          // Display previous section's progress and problems before starting new section
          if (sectionProblems && sectionProblems.length > 0) {
    %>
      <div class="section-header">
        <h3 class="section-title">
          <%= __('unsolved.section') %> 
          <%= sectionProblems[0].chapterNum %>.<%= sectionProblems[0].sectionNum %>: 
          <%= currentSection %>
        </h3>
        <div class="pie-chart-container">
          <canvas
            id="pieChart-<%= sectionProblems[0].chapterNum %>-<%= sectionProblems[0].sectionNum %>"
          ></canvas>
        </div>
        <div class="progress-container">
          <% 
            const totalInSection = sectionProblems[0].maximum;
            const unsolvedCount = sectionProblems.length;
            const otherLangOnlyCount = sectionProblems.filter(p => p.existsInOtherLang).length;
            const solvedInBothCount = totalInSection - unsolvedCount - otherLangOnlyCount;
            const solvedInCurrentOnly = unsolvedCount - otherLangOnlyCount;
          %>
          <div
            class="progress-bar-current"
            style="width: <%= ((totalInSection - unsolvedCount) / totalInSection * 100) %>%"
          ></div>
          <div
            class="progress-bar-other"
            style="width: <%= (otherLangOnlyCount / totalInSection * 100) %>%"
          ></div>
        </div>
        <span class="completion-text">
          <%= (totalInSection - unsolvedCount) %>/<%= totalInSection %>
        </span>
      </div>
      <div class="problem-links mb-4">
        <% sectionProblems.forEach(prob => { %>
          <a
            href="/<%= prob.existsInOtherLang ? (lang === 'en' ? 'ru' : 'en') : lang %>/<%= prob.existsInOtherLang ? '' : 'upload#' %><%= prob.problem %>"
            class="problem-link <%= prob.existsInOtherLang ? 'exists-other-lang' : '' %>"
            title="<%= prob.existsInOtherLang ? __('unsolved.existsInOtherLang') : '' %>"
          >
            <%= prob.problem %>
          </a>
        <% }); %>
      </div>
    <% 
          }
          currentSection = problem.section;
          sectionProblems = [problem];
        } else {
          sectionProblems.push(problem);
        }
      });
      // Display the last section's progress and problems
      if (sectionProblems && sectionProblems.length > 0) {
    %>
      <div class="section-header">
        <h3 class="section-title">
          <%= __('unsolved.section') %> 
          <%= sectionProblems[0].chapterNum %>.<%= sectionProblems[0].sectionNum %>: 
          <%= currentSection %>
        </h3>
        <div class="pie-chart-container">
          <canvas
            id="pieChart-<%= sectionProblems[0].chapterNum %>-<%= sectionProblems[0].sectionNum %>"
          ></canvas>
        </div>
        <div class="progress-container">
          <% 
            const totalInSection = sectionProblems[0].maximum;
            const unsolvedCount = sectionProblems.length;
            const otherLangOnlyCount = sectionProblems.filter(p => p.existsInOtherLang).length;
            const solvedInBothCount = totalInSection - unsolvedCount - otherLangOnlyCount;
            const solvedInCurrentOnly = unsolvedCount - otherLangOnlyCount;
          %>
          <div
            class="progress-bar-current"
            style="width: <%= ((totalInSection - unsolvedCount) / totalInSection * 100) %>%"
          ></div>
          <div
            class="progress-bar-other"
            style="width: <%= (otherLangOnlyCount / totalInSection * 100) %>%"
          ></div>
        </div>
        <span class="completion-text">
          <%= (totalInSection - unsolvedCount) %>/<%= totalInSection %>
        </span>
      </div>
      <div class="problem-links mb-4">
        <% sectionProblems.forEach(prob => { %>
          <a
            href="/<%= prob.existsInOtherLang ? (lang === 'en' ? 'ru' : 'en') : lang %>/<%= prob.existsInOtherLang ? '' : 'upload#' %><%= prob.problem %>"
            class="problem-link <%= prob.existsInOtherLang ? 'exists-other-lang' : '' %>"
            title="<%= prob.existsInOtherLang ? __('unsolved.existsInOtherLang') : '' %>"
          >
            <%= prob.problem %>
          </a>
        <% }); %>
      </div>
    <% } %>
  </div>

  <!-- Footer -->
  <footer class="footer-modern py-4 mt-5">
    <div class="footer-container">
        <div class="row align-items-center text-center text-md-start">
            <div class="col-md-6 mb-4 mb-md-0">
                <a href="/en/" class="d-inline-flex align-items-center text-decoration-none mb-3">
                    <img src="/img/logo_main.svg" alt="Savchenko Solutions Logo" style="height: 40px;" class="me-2" />
                    <span class="fw-bold h5 mb-0 text-white">Savchenko Solutions</span>
                </a>
                <p class="mb-0">
                    <small>
                        © <strong>Savchenko Solutions</strong>, 2023-2025<br />
                        All solutions are contributed by their respective authors and are based on original textbook content, which remains the property of the textbook authors.
                    </small>
                </p>
            </div>
            <div class="col-md-6 text-md-end">
                <p class="small mb-2">
                    Unless otherwise noted, solutions are provided under the <strong>CC BY-SA 4.0</strong> license.
                    Commercial use of any material requires written permission.
                </p>
                <p class="small mb-0">
                    Contact: <a href="mailto:aliaksandr@melnichenka.com" class="text-decoration-none text-white">aliaksandr@melnichenka.com</a>
                </p>
            </div>
        </div>
    </div>
</footer>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>
  <!-- Chart.js (for pie charts) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
  <script>
    $(document).ready(function () {
      // Search functionality
      const searchInput = document.getElementById("searchInput");
      const searchResults = document.getElementById("searchResults");

      searchInput.placeholder = "<%= __('unsolved.searchPlaceholder') %>";

      searchInput.addEventListener("input", async () => {
        const query = searchInput.value.trim();

        if (query.length === 0) {
          searchResults.style.display = "none";
          searchResults.innerHTML = "";
          return;
        }

        try {
          const response = await fetch(`/search?q=${encodeURIComponent(query)}`);
          const data = await response.json();

          if (data.results.length > 0) {
            const limitedResults = data.results.slice(0, 5);
            searchResults.innerHTML = `
              <ul class="list-unstyled mb-0 p-2">
                ${limitedResults
                  .map(
                    (result) => `
                  <li class="py-2 px-3 mb-1 rounded hover-bg-light">
                    <a href="${result.relativePath}" class="d-block text-dark text-decoration-none">
                      <span class="fw-bold">${result.name}</span> - 
                      <span class="text-muted small">${result.snippet}</span>
                    </a>
                  </li>
                `
                  )
                  .join("")}
              </ul>
            `;
            searchResults.style.display = "block";
          } else {
            searchResults.innerHTML = `
              <ul class="list-unstyled mb-0 p-2">
                <li class="py-2 px-3 text-muted"><%= __('unsolved.noResults') %></li>
              </ul>
            `;
            searchResults.style.display = "block";
          }
        } catch (error) {
          console.error("Error fetching search results:", error);
        }
      });

      // Close search results when clicking outside
      document.addEventListener("click", (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          searchResults.style.display = "none";
        }
      });
    });

    function createPieChart(elementId, solved, total) {
      const ctx = document.getElementById(elementId).getContext("2d");
      const container = document.getElementById(elementId).closest(".section-header");
      const linksContainer = container.nextElementSibling;
      const otherLangOnly = linksContainer
        ? linksContainer.querySelectorAll(".problem-link.exists-other-lang").length
        : 0;
      const unsolved = total - solved - otherLangOnly;

      new Chart(ctx, {
        type: "pie",
        data: {
          datasets: [
            {
              data: [solved, otherLangOnly, unsolved],
              backgroundColor: ["#66bb6a", "#64b5f6", "#e0e0e0"],
              borderWidth: 0,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              enabled: true,
              callbacks: {
                label: function (context) {
                  const labels = [
                    "Current Language Solutions",
                    "Other Language Only",
                    "Unsolved",
                  ];
                  return `${labels[context.dataIndex]}: ${context.parsed}`;
                },
              },
              backgroundColor: 'rgba(50, 50, 50, 0.8)',
              padding: 12,
              cornerRadius: 8,
            },
          },
        },
      });
    }

    // Initialize all pie charts
    document.querySelectorAll(".pie-chart-container canvas").forEach((canvas) => {
      const [_, chapter, section] = canvas.id.split("-");
      const container = canvas.closest(".section-header");
      const completionText =
        container.querySelector(".completion-text").textContent.split("/");
      const solved = parseInt(completionText[0]);
      const total = parseInt(completionText[1]);
      createPieChart(canvas.id, solved, total);
    });
  </script>
</body>
</html>
