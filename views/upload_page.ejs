<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="content-language" content="<%= lang %>">
  <meta name="keywords" content="<%= __('meta.keywords') %>">
  <meta name="description" content="<%= __('meta.description') %>">
  <meta name="author" content="<%= __('meta.author') %>">
  <meta name="date" content="<%= __('meta.date') %>" scheme="YYYY-MM">
  <meta property="og:title" content="<%= __('upload.title') %> | <%= __('title') %>">
  <meta property="og:image" content="/img/logo.png">
  <meta property="og:description" content="<%= __('meta.ogDescription') %>">
  <meta name="yandex-verification" content="6cfda41f74038368">

  <title><%= __('upload.title') %> | <%= __('title') %></title>
  <link rel="icon" href="/img/logo.png" type="image/png">

  <!-- Bootstrap CSS & Google Fonts -->
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
  />
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap"
    rel="stylesheet"
  />
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css"
  />

  <style>
    body {
      font-family: 'Roboto', sans-serif;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    main {
      flex: 1;
    }
    .navbar-custom {
      background-color: #343A40;
    }
    .navbar-brand {
      font-weight: 700;
      color: #fff !important;
    }
    .navbar-brand-container {
      background: linear-gradient(135deg, #a3a9b564, #373c4172);
      padding: 0.5rem;
      border-radius: 0.25rem;
      display: flex;
      align-items: center;
    }
    .modern-search {
      background-color: #343a40;
      color: #fff;
      border: 1px solid #495057;
    }
    .modern-search::placeholder {
      color: #adb5bd;
    }
    .content-card {
      background-color: #fff;
      border-radius: 0.5rem;
    }
    .step-label {
      font-weight: 500;
      margin-bottom: 0.25rem;
    }
    /* Hide or show sections based on solution method */
    #latexSection, #scansSection {
      display: none;
    }
    /* Initially, keep both hidden; show them selectively via JavaScript. */
    .image-wrapper {
      transition: all 0.3s ease-out;
      opacity: 1;
      transform: scale(1);
    }
    
    .image-wrapper.fade-out {
      opacity: 0;
      transform: scale(0.8);
    }

    /* Add cursor pointer for preview images */
    .image-wrapper img {
      cursor: pointer;
    }

    .upload-container {
      border: 2px dashed #dee2e6 !important;
      transition: all 0.3s ease;
    }

    .upload-container.dragover {
      border-color: #0d6efd !important;
      background: #f8f9fa;
    }

    .drop-zone {
      cursor: pointer;
    }

    /* Add these new styles */
    .zoomed {
      cursor: zoom-out !important;
      transform-origin: center;
      transition: transform 0.3s ease;
    }

    .modal-xl {
      max-width: 95vw;
    }

    #prevImage, #nextImage {
      z-index: 1060;
      width: 40px;
      height: 40px;
      padding: 8px;
      opacity: 0.8;
      transition: opacity 0.2s;
    }

    #prevImage:hover, #nextImage:hover {
      opacity: 1;
    }

    /* Add these styles for the preview section */
    #scansPreview {
      width: 100%;
      min-height: 100px;
    }

    .image-wrapper {
      transition: all 0.3s ease-out;
      opacity: 1;
      transform: scale(1);
      flex: 0 0 auto; /* Prevent flex items from growing/shrinking */
    }

    /* Update the existing image-wrapper.fade-out style */
    .image-wrapper.fade-out {
      opacity: 0;
      transform: scale(0.8);
    }
  </style>
</head>

<body>
  <!-- Top Navbar -->
  <nav class="navbar navbar-expand-lg navbar-custom">
    <div class="container-fluid">
      <a class="navbar-brand ms-3" href="/">
        <div class="navbar-brand-container">
          <img
            src="https://savchenkosolutions.com/img/book.png"
            alt="Savchenko Solutions"
            width="40"
            height="40"
            class="d-inline-block align-text-center me-2 logo-img"
          />
          Savchenko Solutions
        </div>
      </a>

      <button
        class="navbar-toggler text-white me-3"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#mainNav"
        aria-controls="mainNav"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon text-white"></span>
      </button>

      <div class="collapse navbar-collapse" id="mainNav">
        <ul class="navbar-nav ms-auto me-3 align-items-center">
          <li class="nav-item me-3">
            <div class="search position-relative">
              <input
                type="text"
                id="searchInput"
                class="form-control form-control-sm modern-search"
                placeholder="Search Savchenko Solutions"
                aria-label="Search"
              />
              <div
                id="searchResults"
                class="search-results position-absolute bg-white border rounded shadow-lg"
                style="display: none; z-index: 1050; width: 100%;"
              >
                <ul class="list-unstyled mb-0 p-2"></ul>
              </div>
            </div>
          </li>
          <li class="nav-item me-3">
            <% if (lang === 'en') { %>
              <span class="text-white">
                <strong><a href="/" class="text-white text-decoration-none">EN</a></strong>
              </span>
            <% } else { %>
              <span class="text-white">
                <strong><a href="/en" class="text-white text-decoration-none">RU</a></strong>
              </span>
            <% } %>
          </li>
          <li class="nav-item">
            <% if (locals.usernameCurrent) { %>
              <a href="/user/<%= usernameCurrent %>" class="nav-link">
                <img
                  src="<%= profilePictureCurrent %>"
                  alt="Profile Picture"
                  class="rounded-circle"
                  width="40"
                  height="40"
                />
              </a>
            <% } else { %>
              <a
                href="/<%= lang %>/login"
                class="btn btn-outline-light btn-sm rounded-pill shadow-sm"
              >
                Login
              </a>
            <% } %>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  <!-- /Top Navbar -->

  <main class="container my-5">
    <div class="row justify-content-center g-5">
      <!-- Main Content Column -->
      <div class="col-md-8">
        <div class="content-card shadow-sm p-4">
          <h2 class="text-center mb-4"><%= __('upload.title') %></h2>

          <!-- Step 1: Problem Name -->
          <div class="mb-4">
            <label for="problemName" class="form-label step-label">
              <strong>1.</strong> Select a Problem
            </label>
            <input
              type="text"
              class="form-control"
              id="problemName"
              placeholder="e.g., 13.4.1"
              required
            />
            <div id="problemStatus" class="form-text mt-2"></div>
          </div>

          <!-- Add Anonymous User Info Section -->
          <div id="anonymousSection" class="mb-4" style="display: none;">
            <label class="form-label step-label">
              <strong>1b.</strong> Your Information
            </label>
            <div class="mb-3">
              <input
                type="text"
                class="form-control"
                id="fullName"
                placeholder="Your Full Name"
              />
              <div class="form-text">
                Please provide your full name or <a href="/<%= lang %>/login" class="text-primary">login</a> to continue
              </div>
            </div>
          </div>

          <!-- Step 2: Choose the Method -->
          <div class="mb-4">
            <label class="form-label step-label">
              <strong>2.</strong> How would you like to provide your solution?
            </label>
            <div class="form-check">
              <input
                class="form-check-input"
                type="radio"
                name="solutionMethod"
                id="methodScans"
                value="scans"
              />
              <label class="form-check-label" for="methodScans">
                Upload Scans/Photos of My Notebook
              </label>
            </div>
            <div class="form-check">
              <input
                class="form-check-input"
                type="radio"
                name="solutionMethod"
                id="methodLatex"
                value="latex"
              />
              <label class="form-check-label" for="methodLatex">
                Type My Solution in LaTeX
              </label>
            </div>
          </div>

          <!-- Step 3A: If user chose "Upload Scans" -->
          <div id="scansSection" class="mb-4">
            <div class="upload-container border rounded-4 p-4 text-center" 
                 style="background: linear-gradient(to bottom, #f8f9fa, #ffffff); min-height: 300px; border-width: 2px !important;">

              <!-- Modern Drag & Drop Zone -->
              <div class="drop-zone mb-4 py-5 rounded-4" 
                   style="background: rgba(255,255,255,0.7); border: 1px dashed #dee2e6;"
                   onclick="document.getElementById('fileUpload').click()">
                <div class="mb-3">
                  <i class="bi bi-cloud-upload fs-1 text-primary"></i>
                </div>
                <p class="mb-3 text-muted">Drag and drop your files here</p>
                <input type="file" class="form-control d-none" id="fileUpload" name="files" multiple accept="image/*">
                <button class="btn btn-outline-secondary rounded-pill px-4" id="selectFilesBtn" 
                        onclick="event.stopPropagation()">
                  <i class="bi bi-folder me-2"></i>Select files
                </button>
              </div>

              <!-- Preview Section -->
              <div id="scansPreview" class="d-flex flex-wrap gap-3 justify-content-start mt-4"></div>

              <!-- Modern File Information -->
              <div class="mt-4 p-3 rounded-4 bg-white shadow-sm">
                <div class="d-flex align-items-center justify-content-center gap-4 text-muted small">
                  <div>
                    <i class="bi bi-file-earmark me-1"></i>
                    PNG, JPG, PDF, DOC
                  </div>
                  <div>
                    <i class="bi bi-arrows-angle-expand me-1"></i>
                    Max 50 MB
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 3B: If user chose "LaTeX" -->
          <div id="latexSection" class="mb-4">
            <label for="solutionContent" class="form-label">
              Type Your LaTeX Solution
            </label>
            <textarea
              class="form-control"
              id="solutionContent"
              rows="6"
              placeholder="Type your LaTeX here..."
            ></textarea>
            <div class="form-text">
              Use LaTeX syntax (e.g., $E = mc^2$). We'll render it below.
            </div>

            <!-- Added Illustration Upload Section -->
            <div class="mt-3">
              <label for="latexIllustrations" class="form-label">
                Add Illustrations (Optional)
              </label>
              <input
                type="file"
                class="form-control"
                id="latexIllustrations"
                multiple
                accept="image/*"
              />
              <div class="form-text">
                Upload any supporting diagrams or illustrations for your solution.
              </div>
              <!-- Preview for LaTeX illustrations -->
              <div id="latexImagesPreview" class="d-flex flex-wrap gap-2 mt-2"></div>
            </div>

            <!-- LaTeX Preview -->
            <div class="my-3">
              <h6>LaTeX Preview:</h6>
              <div
                id="latexPreview"
                class="border rounded p-3 bg-light"
                style="min-height: 80px;"
              ></div>
            </div>
          </div>

          <!-- Submit Button -->
          <div class="text-center">
            <button id="submitBtn" class="btn btn-primary rounded-pill px-4" disabled>
              <i class="bi bi-cloud-upload me-2"></i> Submit Solution
            </button>
          </div>
        </div>
      </div>
      <!-- /Main Content Column -->

      <!-- Guidelines Sidebar -->
      <div class="col-md-4">
        <div class="content-card shadow-sm p-4">
          <h4 class="mb-3"><%= __('upload.guidelines') %></h4>
          <ul class="list-unstyled">
            <li class="mb-3">
              <i class="bi bi-check-circle-fill me-2"></i>
              <%= __('upload.guideline1') %>
            </li>
            <li class="mb-3">
              <i class="bi bi-check-circle-fill me-2"></i>
              <%= __('upload.guideline2') %>
            </li>
            <li class="mb-3">
              <i class="bi bi-check-circle-fill me-2"></i>
              <%= __('upload.guideline3') %>
            </li>
          </ul>
        </div>
      </div>
      <!-- /Guidelines Sidebar -->
    </div>
  </main>

  <!-- Footer -->
  <footer class="bg-light py-4">
    <div class="container text-center">
      <p class="mb-0">
        <small>© <strong>Savchenko Solutions</strong>, 2023-2025</small>
      </p>
      <p class="mb-0">
        <small>
          All rights belong to the authors.
          Commercial use of materials - with the written permission of the authors.
          aliaksandr@melnichenka.com
        </small>
      </p>
    </div>
  </footer>
  <!-- /Footer -->

  <!-- Scripts -->
  <script
    src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
  ></script>
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
  ></script>
  
  <!-- (Optional) MathJax for LaTeX rendering -->
  <!-- Uncomment if you'd like real-time LaTeX rendering in the preview
  <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js" async></script>
  -->

  <!-- Replace the existing Image Preview Modal with this new one -->
  <div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
      <div class="modal-content bg-dark">
        <div class="modal-body p-0 position-relative">
          <!-- Navigation buttons -->
          <button type="button" class="btn btn-light position-absolute top-50 start-0 translate-middle-y rounded-circle ms-3" id="prevImage">
            <i class="bi bi-chevron-left"></i>
          </button>
          <button type="button" class="btn btn-light position-absolute top-50 end-0 translate-middle-y rounded-circle me-3" id="nextImage">
            <i class="bi bi-chevron-right"></i>
          </button>
          
          <!-- Close button -->
          <button type="button" class="btn-close btn-close-white position-absolute top-0 end-0 m-3" data-bs-dismiss="modal" aria-label="Close"></button>
          
          <!-- Image container with zoom capability -->
          <div class="text-center" style="min-height: 80vh; display: flex; align-items: center; justify-content: center;">
            <img id="previewModalImage" src="" alt="Preview" class="img-fluid" style="max-height: 80vh; cursor: zoom-in;">
          </div>
          
          <!-- Image counter -->
          <div class="position-absolute bottom-0 start-50 translate-middle-x mb-3 px-3 py-1 bg-dark bg-opacity-75 rounded-pill text-white">
            <span id="imageCounter">1/1</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const methodScans = document.getElementById('methodScans');
      const methodLatex = document.getElementById('methodLatex');
      const scansSection = document.getElementById('scansSection');
      const latexSection = document.getElementById('latexSection');
      const fileUpload = document.getElementById('fileUpload');
      const scansPreview = document.getElementById('scansPreview');
      const solutionContent = document.getElementById('solutionContent');
      const latexPreview = document.getElementById('latexPreview');
      const submitBtn = document.getElementById('submitBtn');
      const selectFilesBtn = document.getElementById('selectFilesBtn');

      // Toggle sections based on selected method
      function toggleSolutionMethod() {
        if (methodScans.checked) {
          scansSection.style.display = 'block';
          latexSection.style.display = 'none';
        } else if (methodLatex.checked) {
          scansSection.style.display = 'none';
          latexSection.style.display = 'block';
        } else {
          scansSection.style.display = 'none';
          latexSection.style.display = 'none';
        }
      }

      // Listen for changes in radio buttons
      methodScans.addEventListener('change', toggleSolutionMethod);
      methodLatex.addEventListener('change', toggleSolutionMethod);

      // Create preview modal instance
      const imagePreviewModal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
      const previewModalImage = document.getElementById('previewModalImage');
      const prevButton = document.getElementById('prevImage');
      const nextButton = document.getElementById('nextImage');
      const imageCounter = document.getElementById('imageCounter');
      let currentImageIndex = 0;
      let currentImages = [];

      // Function to update modal navigation
      function updateModalNavigation() {
        // Get all current preview images every time we update navigation
        currentImages = Array.from(scansPreview.querySelectorAll('img'))
          .map(img => img.dataset.fileData || img.src)
          .filter(src => src); // Filter out any undefined or empty sources
        
        imageCounter.textContent = `${currentImageIndex + 1}/${currentImages.length}`;
        prevButton.style.display = currentImages.length > 1 ? 'block' : 'none';
        nextButton.style.display = currentImages.length > 1 ? 'block' : 'none';
      }

      // Handle image navigation
      prevButton.addEventListener('click', () => {
        currentImageIndex = (currentImageIndex - 1 + currentImages.length) % currentImages.length;
        previewModalImage.src = currentImages[currentImageIndex];
        updateModalNavigation();
      });

      nextButton.addEventListener('click', () => {
        currentImageIndex = (currentImageIndex + 1) % currentImages.length;
        previewModalImage.src = currentImages[currentImageIndex];
        updateModalNavigation();
      });

      // Add keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (imagePreviewModal._element.classList.contains('show')) {
          if (e.key === 'ArrowLeft') prevButton.click();
          if (e.key === 'ArrowRight') nextButton.click();
          if (e.key === 'Escape') imagePreviewModal.hide();
        }
      });

      // Handle zoom functionality
      previewModalImage.addEventListener('click', function() {
        if (this.classList.contains('zoomed')) {
          this.style.transform = 'scale(1)';
          this.classList.remove('zoomed');
        } else {
          this.style.transform = 'scale(1.5)';
          this.classList.add('zoomed');
        }
      });

      // Update the image preview click handlers
      function setupImagePreview(img) {
        img.onclick = function() {
          // Get fresh list of images and find current index
          currentImages = Array.from(scansPreview.querySelectorAll('img'))
            .map(img => img.dataset.fileData || img.src)
            .filter(src => src);
          currentImageIndex = currentImages.indexOf(this.dataset.fileData || this.src);
          
          previewModalImage.src = this.dataset.fileData || this.src;
          previewModalImage.style.transform = 'scale(1)';
          previewModalImage.classList.remove('zoomed');
          updateModalNavigation();
          imagePreviewModal.show();
        };
      }

      // Update the preview creation code
      function createPreviewImage(file, container) {
        const wrapper = document.createElement('div');
        wrapper.classList.add('position-relative', 'image-wrapper');
        
        const img = document.createElement('img');
        img.classList.add('img-thumbnail', 'cursor-pointer');
        img.style.height = '100px';
        img.style.width = '100px';
        img.style.objectFit = 'cover';
        img.style.objectPosition = 'center';
        
        const reader = new FileReader();
        reader.onload = function(e) {
          img.src = e.target.result;
          // Store the file data in a data attribute for later use
          img.dataset.fileData = e.target.result;
          // Get all current preview images after this image is loaded
          const allImages = Array.from(container.querySelectorAll('img'))
            .map(img => img.dataset.fileData || img.src)
            .filter(src => src); // Filter out any undefined or empty sources
          setupImagePreview(img, allImages);
          validateForm();
        };
        reader.readAsDataURL(file);

        // Add remove button
        const removeBtn = document.createElement('button');
        removeBtn.innerHTML = '<i class="bi bi-x"></i>';
        removeBtn.classList.add('btn', 'btn-dark', 'btn-sm', 'position-absolute', 'rounded-circle');
        removeBtn.style.top = '-8px';
        removeBtn.style.right = '-8px';
        
        removeBtn.onclick = function() {
          wrapper.classList.add('fade-out');
          setTimeout(() => {
            wrapper.remove();
            validateForm();
          }, 300);
        };

        wrapper.appendChild(img);
        wrapper.appendChild(removeBtn);
        
        // Insert at the beginning of the container instead of appending
        container.insertBefore(wrapper, container.firstChild);

      }

      // Add drag and drop functionality
      const uploadContainer = document.querySelector('.upload-container');
      
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        uploadContainer.addEventListener(eventName, preventDefaults, false);
      });

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      ['dragenter', 'dragover'].forEach(eventName => {
        uploadContainer.addEventListener(eventName, highlight, false);
      });

      ['dragleave', 'drop'].forEach(eventName => {
        uploadContainer.addEventListener(eventName, unhighlight, false);
      });

      function highlight(e) {
        uploadContainer.classList.add('dragover');
      }

      function unhighlight(e) {
        uploadContainer.classList.remove('dragover');
      }

      uploadContainer.addEventListener('drop', handleDrop, false);

      function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        fileUpload.files = files; // Update the file input
        [...files].forEach(file => {
          if (file.type.startsWith('image/')) {
            createPreviewImage(file, scansPreview);
          }
        });
      }

      // Live preview for LaTeX text
      solutionContent.addEventListener('input', function() {
        latexPreview.textContent = this.value;

        // If using MathJax for real-time rendering, reprocess here:
        // if (window.MathJax) {
        //   MathJax.typesetPromise([latexPreview]);
        // }
      });

      // Add problem verification
      const problemNameInput = document.getElementById('problemName');
      const anonymousSection = document.getElementById('anonymousSection');
      const problemStatus = document.getElementById('problemStatus');
      const isSignedIn = <%= !!locals.usernameCurrent %>;
      
      let problemDebounceTimer;
      
      problemNameInput.addEventListener('input', function() {
        clearTimeout(problemDebounceTimer);
        problemDebounceTimer = setTimeout(async () => {
          const problemName = this.value.trim();
          
          // Check problem name format (e.g., "13.4.1")
          const problemFormat = /^\d+\.\d+\.\d+$/;
          if (problemName && !problemFormat.test(problemName)) {
            problemStatus.innerHTML = '<span class="text-danger"><i class="bi bi-x-circle"></i> Invalid format. Use format: chapter.section.problem (e.g., 13.4.1)</span>';
            anonymousSection.style.display = 'none';
            return;
          }

          if (problemName) {
            try {
              const response = await fetch(`/api/verify-problem/${problemName}`);
              const data = await response.json();
              
              if (data.exists) {
                problemStatus.innerHTML = '<span class="text-warning"><i class="bi bi-exclamation-circle"></i> Problem already exists</span>';
                anonymousSection.style.display = 'none';
              } else if (data.existsInOtherLang) {
                const otherLang = '<%= lang %>' === 'en' ? 'Russian' : 'English';
                problemStatus.innerHTML = `<span class="text-info"><i class="bi bi-info-circle"></i> Problem exists in ${otherLang}. Your solution will be linked.</span>`;
                anonymousSection.style.display = 'none';
              } else {
                problemStatus.innerHTML = '<span class="text-success"><i class="bi bi-check-circle"></i> New problem - ready to submit</span>';
                anonymousSection.style.display = isSignedIn ? 'none' : 'block';
              }
            } catch (err) {
              console.error(err);
              problemStatus.innerHTML = '<span class="text-danger"><i class="bi bi-x-circle"></i> Error checking problem</span>';
            }
          }
        }, 500);
      });

      // Add validation function
      function validateForm() {
        const problemName = problemNameInput.value.trim();
        const methodSelected = methodScans.checked || methodLatex.checked;
        const fullNameInput = document.getElementById('fullName');
        
        // Check if anonymous section is visible and requires name
        const needsFullName = !isSignedIn && anonymousSection.style.display !== 'none';
        const hasFullName = fullNameInput ? fullNameInput.value.trim() : true;

        // Check for content based on selected method
        let hasContent = false;
        if (methodScans.checked) {
          hasContent = scansPreview.children.length > 0;
        } else if (methodLatex.checked) {
          hasContent = solutionContent.value.trim().length > 0;
        }

        // Enable submit button only if all required fields are filled
        submitBtn.disabled = !(
          problemName && 
          methodSelected && 
          hasContent && 
          (!needsFullName || hasFullName)
        );
      }

      // Add validation listeners
      problemNameInput.addEventListener('input', validateForm);
      methodScans.addEventListener('change', validateForm);
      methodLatex.addEventListener('change', validateForm);
      solutionContent.addEventListener('input', validateForm);
      if (document.getElementById('fullName')) {
        document.getElementById('fullName').addEventListener('input', validateForm);
      }

      // Update submit handler
      submitBtn.addEventListener('click', async function(e) {
        e.preventDefault();

        const formData = new FormData();
        formData.append('problemName', problemNameInput.value);
        formData.append('method', methodScans.checked ? 'scans' : 'latex');
        formData.append('lang', '<%= lang %>');
        
        if (document.getElementById('fullName')) {
          formData.append('fullName', document.getElementById('fullName').value);
        }

        if (methodScans.checked) {
          // Get all images from the preview div and append them to formData
          const previewImages = scansPreview.querySelectorAll('img');
          const promises = Array.from(previewImages).map((img, index) =>
            fetch(img.src)
              .then(res => res.blob())
              .then(blob => {
                const fileName = `scan-${index}.png`;
                formData.append('files', blob, fileName);
              })
          );

          // Wait for all images to be processed
          await Promise.all(promises);
        } else {
          // Handle LaTeX content
          formData.append('latexContent', solutionContent.value);
          const illustrations = document.getElementById('latexIllustrations').files;
          Array.from(illustrations).forEach(file => {
            formData.append('illustrations', file);
          });
        }

        try {
          const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
          });
          
          const data = await response.json();
          if (data.success) {
            window.location.href = data.redirectUrl;
          } else {
            alert(data.message || 'There was an error uploading your solution.');
          }
        } catch (err) {
          console.error(err);
          alert('An error occurred while uploading. Please try again.');
        }
      });

      // Update the LaTeX illustrations preview with animation
      document.getElementById('latexIllustrations').addEventListener('change', function() {
        const preview = document.getElementById('latexImagesPreview');
        const files = this.files;
        
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
          if (file.type.startsWith('image/')) {
            createPreviewImage(file, preview);
          }
        }
      });

      // Add click handler for the select files button
      selectFilesBtn.addEventListener('click', function() {
        fileUpload.click();
      });

      // Update the file input change handler
      fileUpload.addEventListener('change', function(e) {
        const files = this.files;
        [...files].forEach(file => {
          if (file.type.startsWith('image/')) {
            createPreviewImage(file, scansPreview);
          }
        });
      });
    });
  </script>
</body>
</html>
