<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Post - <%= name %>
    </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/codemirror.min.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/mode/markdown/markdown.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/mode/stex/stex.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            extensions: ['tex2jax.js'],
            jax: ['input/TeX', 'output/HTML-CSS'],
            tex2jax: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                processEscapes: true,
                processClass: 'tex2jax',
                ignoreClass: 'html'
            },
            showProcessingMessages: false,
            messageStyle: 'none'
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/mode/multiplex.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/selection/active-line.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/matchbrackets/matchbrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/edit/matchbrackets.min.js"></script>

    <style>
        :root {
            --font-size: 12px;
            --source-font-family: "Lucida Console", "Source Code Pro", monospace;
            --line-height: 1.6;
        }

        body {
            display: flex;
            margin: 0;
            /* height: 100vh; */
            padding-top: 50px;
        }

        #editor {
            width: 50%;
            height: calc(100vh - 50px);
            box-sizing: border-box;
            /* margin-top: 50px; */
        }

        #preview {
            width: 50%;
            height: calc(100vh - 50px);
            overflow-y: auto;
            box-sizing: border-box;
            background: #f9f9f9;
            word-break: break-word;
            padding: 1rem 3rem 1rem 3rem;
            /* margin-top: 50px; */
        }

        #preview img {
            max-width: 100%;
            height: auto;
        }

        #preview pre {
            overflow-x: auto;
            max-width: 100%;
            padding: 1em;
            background: #f5f5f5;
            border-radius: 4px;
        }

        #preview code {
            background: #f5f5f5;
            padding: 2px 4px;
            border-radius: 3px;
        }

        #resizer {
            width: 5px;
            height: calc(100vh - 50px);
            background-color: #2f3a4c;
            cursor: ew-resize !important;
            position: relative;
            z-index: 1;
            /* margin-top: 50px; */
        }

        #resizer::after,
        #resizer::before {
            content: '';
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='7' height='18'%3E%3Cpath d='M2 0h3v3H2zm0 5h3v3H2zm0 5h3v3H2zm0 5h3v3H2z' fill='%239da7b7'/%3E%3C/svg%3E");
            position: absolute;
            z-index: 2;
            display: block;
            height: 18px;
            left: -1px;
            width: 7px;
        }

        #resizer::after {
            top: 25%;
        }

        #resizer::before {
            top: 75%;
        }

        /* Apply styles to CodeMirror */
        .CodeMirror {
            border: 1px solid #ddd;
            font-family: var(--source-font-family);
            font-size: var(--font-size);
            line-height: var(--line-height);
            height: calc(100% - 0.2em);
            cursor: url(/img/cursor-editorFreeText.svg) 0 16, text;
        }

        .CodeMirror pre.CodeMirror-line,
        .CodeMirror pre.CodeMirror-line-like {
            padding: 0 2px 0 6px;
        }

        .video-container {
            position: relative;
            padding-bottom: 56.25%;
            /* 16:9 aspect ratio */
            height: 0;
            overflow: hidden;
            max-width: 100%;
            margin: 1em 0;
        }

        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        /* LaTeX Syntax Highlighting (Overleaf-inspired) */
        .cm-keyword {
            /* LaTeX commands like \begin, \end, etc */
            color: #1a8bff;
            font-weight: normal;
        }

        .cm-tag {
            /* Environment names and special LaTeX keywords */
            color: blue;
        }

        .cm-bracket {
            /* Brackets and braces */
            color: #444444;
        }

        .cm-math {
            /* Math content inside $ $ and $$ $$ */
            color: rgb(3, 106, 7);
        }

        .cm-math .cm-bracket {
            color: black !important;
            /* Force black color for brackets in math mode */
        }

        .cm-delim {
            /* Math delimiters ($, $$) */
            color: rgb(3, 106, 7);
            /* font-weight: bold; */
        }

        /* LaTeX special characters */
        .cm-special {
            color: red;
        }

        /* Comments */
        .cm-comment {
            color: red;
            font-style: italic;
        }

        /* Active line gutter styling */
        .CodeMirror-activeline-gutter {
            background-color: #dcdcdc;
        }

        .cm-math-command {
            /* LaTeX commands within math mode */
            color: #833FBA !important;
            /* font-weight: bold; */
        }

        /* Active line styling */
        .CodeMirror-activeline-background {
            background-color: rgba(0, 0, 0, 0.07) !important;
        }

        .CodeMirror-linenumber {
            color: #333;
            width: 20px;
        }

        .CodeMirror-gutters {
            min-width: 35px;
            text-align: right;
            padding-right: 3px;
        }

        /* Add these heading styles to your existing CSS section */
        .cm-header-1 {
            /* # */
            color: #2c3e50;
            font-size: 1.4em;
            font-weight: bold;
        }

        .cm-header-2 {
            /* ## */
            color: #34495e;
            font-size: 1.3em;
            font-weight: bold;
        }

        .cm-header-3 {
            /* ### */
            color: #3498db;
            font-size: 1.2em;
            font-weight: bold;
        }

        .cm-header-4 {
            /* #### */
            color: #2980b9;
            font-size: 1.1em;
            font-weight: bold;
        }

        .cm-header-5 {
            /* ##### */
            color: #1abc9c;
            font-weight: bold;
        }

        .cm-header-6 {
            /* ###### */
            color: #16a085;
            font-weight: bold;
        }

        /* Optional: Style the heading hashtags differently */
        .cm-header {
            position: relative;
        }

        /* Add these cursor-related styles */
        .cm-layer {
            position: absolute;
            z-index: 150;
        }

        .cm-cursorLayer {
            animation-duration: 1200ms;
            animation-name: cm-blink;
            pointer-events: none;
        }

        .cm-cursor {
            border-left: 1px solid #0066cc;
            margin-left: -1px;
            position: absolute;
        }

        @keyframes cm-blink {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        /* Update cursor styles with higher specificity */
        .CodeMirror .CodeMirror-cursor {
            border-left: 2px solid rgba(0, 0, 0, 0.2) !important;
            /* black with 0.2 opacity */
        }

        .CodeMirror-focused .CodeMirror-cursor {
            border-left: 2px solid rgba(0, 0, 0, 0.2) !important;
        }

        /* Update these selection styles */
        .CodeMirror-selected {
            background-color: #b3d4fc !important;
            /* Light blue color */
        }

        .CodeMirror-focused .CodeMirror-selected {
            background-color: #b3d4fc !important;
        }

        .CodeMirror-line::selection,
        .CodeMirror-line>span::selection,
        .CodeMirror-line>span>span::selection {
            background-color: #b3d4fc !important;
        }

        .CodeMirror-line::-moz-selection,
        .CodeMirror-line>span::-moz-selection,
        .CodeMirror-line>span>span::-moz-selection {
            background-color: #b3d4fc !important;
        }

        /* Update matching bracket highlight */
        .CodeMirror-matchingbracket {
            background-color: #328c8252 !important;
            color: inherit !important;
            pointer-events: none;
        }

        /* Add non-matching bracket highlight */
        .CodeMirror-nonmatchingbracket {
            background-color: #bb555544 !important;
            color: inherit !important;
        }

        /* Add line wrapping styles */
        .CodeMirror-wrap pre.CodeMirror-line,
        .CodeMirror-wrap pre.CodeMirror-line-like {
            white-space: break-spaces;
            word-break: break-word;
            overflow-wrap: anywhere;
        }
    </style>


</head>

<body>
    <header
        style="position: fixed; top: 0; left: 0; right: 0; height: 50px; background-color: #f8f9fa; border-bottom: 1px solid #dee2e6; display: flex; align-items: center; justify-content: space-between; padding: 0 20px; z-index: 1000;">
        <h1 style="margin: 0; font-size: 1.25rem;">Editing: <%= name %></h1>
        <button id="save-button" style="padding: 8px 16px; background-color: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">
            Save Changes
        </button>
    </header>

    <form id="save-form" method="POST" action="/<%= lang %>/save/<%= name %>">
        <textarea name="content" id="hidden-content" style="display: none;"></textarea>
    </form>

    <div id="editor"></div>
    <div id="resizer"></div>
    <div id="preview"></div>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/theme/neat.min.css">


    <script>
        // Define custom mixed mode for Markdown + LaTeX
        CodeMirror.defineMode("markdown-latex", function (config) {
            const markdownMode = CodeMirror.getMode(config, "markdown");

            // Helper function to handle LaTeX commands
            function handleLatexCommand(stream) {
                if (stream.match(/^\\[a-zA-Z]+/)) {
                    return "math-command";
                }
                return null;
            }

            // Helper function to handle brackets in math mode
            function handleBrackets(stream) {
                if (stream.match(/[{}]/)) {
                    return "math-bracket";  // New token type for brackets in math mode
                }
                return null;
            }

            return CodeMirror.multiplexingMode(markdownMode, {
                open: "$$", close: "$$",
                mode: {
                    token: function (stream, state) {
                        // Check for brackets first
                        const bracket = handleBrackets(stream);
                        if (bracket) return bracket;

                        // Check for LaTeX commands
                        const command = handleLatexCommand(stream);
                        if (command) return command;

                        if (stream.match(/^.*?\$\$/)) {
                            return "math";
                        }
                        stream.next();
                        return "math";
                    }
                },
                delimStyle: "delim"
            }, {
                open: "$", close: "$",
                mode: {
                    token: function (stream, state) {
                        // Check for brackets first
                        const bracket = handleBrackets(stream);
                        if (bracket) return bracket;

                        // Check for LaTeX commands
                        const command = handleLatexCommand(stream);
                        if (command) return command;

                        if (stream.match(/^.*?\$/)) {
                            return "math";
                        }
                        stream.next();
                        return "math";
                    }
                },
                delimStyle: "delim"
            });
        });

        const editor = CodeMirror(document.getElementById('editor'), {
            value: `<%- content.replace(/\\/g, '\\\\').replace(/\$/g, '\\$') %>`,
            mode: 'markdown-latex',
            lineNumbers: true,
            lineWrapping: true,
            theme: 'neat',
            viewportMargin: Infinity,
            styleActiveLine: true,
            matchBrackets: true
        });

        const preview = document.getElementById('preview');
        const resizer = document.getElementById('resizer');

        // Render Markdown and LaTeX
        function renderPreview(content) {
            let html = window.marked.parse(transformImageMarkdown(content.replace(/;/g, "\\;").replace(/,/g, "\\,").replace(/\*/g, "\\*").replace(/~/g, "\\~")));
            // Apply custom image and YouTube transformations
            html = html.replace(/<em>/g, "_").replace(/<\/em>/g, "_");
            html = html.replace(/\\\*/g, "*");
            preview.innerHTML = html;
            MathJax.Hub.Queue(["Typeset", MathJax.Hub, preview]);
        }

        // Add the transformImageMarkdown function
        function transformImageMarkdown(htmlContent) {
            // Regular expression for YouTube URL format
            const youtubeRegex = /!\[\]\((https:\/\/www\.youtube\.com\/embed\/[a-zA-Z0-9_-]+(\?t=\d+)?)\)/g;

            // Replace YouTube URL format with video container HTML
            htmlContent = htmlContent.replace(youtubeRegex, (match, youtubeUrl) => {
                return `<div class="video-container">
                            <iframe allowfullscreen="" class="video" frameborder="0" src="${youtubeUrl}"></iframe>
                        </div>`;
            });

            // Regular expression for custom image markdown
            const regex = /!\[(.*?)?\|(.*?x.*?)?,?(\d+%)?\]\(\.\.\/\.\.\/img\/(.*?)\/(.*?)\)/g;

            return htmlContent.replace(regex, (match, altText = "", dimensions, scale, folder, filename) => {
                let width = "auto", height = "auto";
                let scalePercentage = "100%";

                if (dimensions) {
                    const [w, h] = dimensions.split("x");
                    width = w ? `${w}px` : "auto";
                    height = h ? `${h.replace("\\, ", "")}px` : "auto";
                }
                if (scale) {
                    scalePercentage = scale;
                }

                return `<center>
              <figure>
                <img src="..\\..\\img\\${folder}\\${filename}"
                  loading="lazy" alt="${altText}" width="${scalePercentage}" style="max-width:${width}; max-height:${height};" />
                <figcaption>${altText}</figcaption>
              </figure>
              </center>`;
            });
        }

        // Initial render
        renderPreview(editor.getValue());

        // Live preview update
        editor.on('change', () => {
            renderPreview(editor.getValue());
        });

        // Resizable divider logic
        let isResizing = false;

        resizer.addEventListener('mousedown', (e) => {
            isResizing = true;
            document.body.style.cursor = 'col-resize';
        });

        document.addEventListener('mousemove', (e) => {
            if (!isResizing) return;

            const totalWidth = window.innerWidth;
            const editorWidth = e.clientX;

            if (editorWidth > 100 && editorWidth < totalWidth - 100) {
                const previewWidth = totalWidth - editorWidth - 5; // 5px resizer width
                document.getElementById('editor').style.width = `${editorWidth}px`;
                document.getElementById('preview').style.width = `${previewWidth}px`;
            }
        });

        document.addEventListener('mouseup', () => {
            if (isResizing) {
                isResizing = false;
                document.body.style.cursor = 'default';
            }
        });

        // Add save functionality
        document.getElementById('save-button').addEventListener('click', () => {
            // Get current content from editor
            const content = editor.getValue();
            
            // Update hidden textarea
            document.getElementById('hidden-content').value = content;
            
            // Submit the form
            document.getElementById('save-form').submit();
        });

        // Add keyboard shortcut (Ctrl/Cmd + S)
        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault(); // Prevent browser's save dialog
                document.getElementById('save-button').click();
            }
        });
    </script>

</body>

</html>