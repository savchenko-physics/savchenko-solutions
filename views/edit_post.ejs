<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Post - <%= name %>
    </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/codemirror.min.css">
    <script src="/js/jquery-1.10.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/mode/markdown/markdown.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/mode/stex/stex.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
            extensions: ['tex2jax.js'],
            jax: ['input/TeX', 'output/HTML-CSS'],
            tex2jax: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                processEscapes: true,
                processClass: 'tex2jax',
                ignoreClass: 'html'
            },
            showProcessingMessages: false,
            messageStyle: 'none'
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/mode/multiplex.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/selection/active-line.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/matchbrackets/matchbrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/edit/matchbrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.10/addon/edit/closebrackets.min.js"></script>

    <style>
        :root {
            --font-size: 12px;
            --source-font-family: "Lucida Console", "Source Code Pro", monospace;
            --line-height: 1.6;
        }

        body {
            display: flex;
            margin: 0;
            padding-top: 50px;
            font-family: Lato, sans-serif;
            font-size: 16px;
            line-height: 1.5625;
        }

        #editor {
            width: 50%;
            height: calc(100vh - 50px);
            box-sizing: border-box;
            /* margin-top: 50px; */
        }

        #preview {
            width: 50%;
            height: calc(100vh - 50px);
            overflow-y: auto;
            box-sizing: border-box;
            background: #f9f9f9;
            word-break: break-word;
            padding: 1rem 3rem 1rem 3rem;
            /* margin-top: 50px; */
        }

        #preview img {
            max-width: 100%;
            height: auto;
        }

        #preview pre {
            overflow-x: auto;
            max-width: 100%;
            padding: 1em;
            background: #f5f5f5;
            border-radius: 4px;
        }

        #preview code {
            background: #f5f5f5;
            padding: 2px 4px;
            border-radius: 3px;
        }

        #resizer {
            width: 5px;
            height: calc(100vh - 50px);
            background-color: #2f3a4c;
            cursor: ew-resize !important;
            position: relative;
            z-index: 1;
            /* margin-top: 50px; */
        }

        #resizer::after,
        #resizer::before {
            content: '';
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='7' height='18'%3E%3Cpath d='M2 0h3v3H2zm0 5h3v3H2zm0 5h3v3H2zm0 5h3v3H2z' fill='%239da7b7'/%3E%3C/svg%3E");
            position: absolute;
            z-index: 2;
            display: block;
            height: 18px;
            left: -1px;
            width: 7px;
        }

        #resizer::after {
            top: 25%;
        }

        #resizer::before {
            top: 75%;
        }

        /* Apply styles to CodeMirror */
        .CodeMirror {
            border: 1px solid #ddd;
            font-family: var(--source-font-family);
            font-size: var(--font-size);
            line-height: var(--line-height);
            height: calc(100% - 0.2em);
            cursor: url(/img/cursor-editorFreeText.svg) 0 16, text;
        }

        .CodeMirror pre.CodeMirror-line,
        .CodeMirror pre.CodeMirror-line-like {
            padding: 0 2px 0 6px;
        }

        .video-container {
            position: relative;
            padding-bottom: 56.25%;
            /* 16:9 aspect ratio */
            height: 0;
            overflow: hidden;
            max-width: 100%;
            margin: 1em 0;
        }

        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        /* LaTeX Syntax Highlighting (Overleaf-inspired) */
        .cm-keyword {
            /* LaTeX commands like \begin, \end, etc */
            color: #1a8bff;
            font-weight: normal;
        }

        .cm-tag {
            /* Environment names and special LaTeX keywords */
            color: blue;
        }

        .cm-bracket {
            /* Brackets and braces */
            color: #444444;
        }

        .cm-math {
            /* Math content inside $ $ and $$ $$ */
            color: rgb(3, 106, 7);
        }

        .cm-math .cm-bracket {
            color: black !important;
            /* Force black color for brackets in math mode */
        }

        .cm-delim {
            /* Math delimiters ($, $$) */
            color: rgb(3, 106, 7);
            /* font-weight: bold; */
        }

        /* LaTeX special characters */
        .cm-special {
            color: red;
        }

        /* Comments */
        .cm-comment {
            color: red;
            font-style: italic;
        }

        /* Active line gutter styling */
        .CodeMirror-activeline-gutter {
            background-color: #dcdcdc;
        }

        .cm-math-command {
            /* LaTeX commands within math mode */
            color: #833FBA !important;
            /* font-weight: bold; */
        }

        /* Active line styling */
        .CodeMirror-activeline-background {
            background-color: rgba(0, 0, 0, 0.07) !important;
        }

        .CodeMirror-linenumber {
            color: #333;
            width: 20px;
        }

        .CodeMirror-gutters {
            min-width: 35px;
            text-align: right;
            padding-right: 3px;
        }

        /* Add these heading styles to your existing CSS section */
        .cm-header-1 {
            /* # */
            color: #2c3e50;
            font-size: 1.4em;
            font-weight: bold;
        }

        .cm-header-2 {
            /* ## */
            color: #34495e;
            font-size: 1.3em;
            font-weight: bold;
        }

        .cm-header-3 {
            /* ### */
            color: #3498db;
            font-size: 1.2em;
            font-weight: bold;
        }

        .cm-header-4 {
            /* #### */
            color: #2980b9;
            font-size: 1.1em;
            font-weight: bold;
        }

        .cm-header-5 {
            /* ##### */
            color: #1abc9c;
            font-weight: bold;
        }

        .cm-header-6 {
            /* ###### */
            color: #16a085;
            font-weight: bold;
        }

        /* Optional: Style the heading hashtags differently */
        .cm-header {
            position: relative;
        }

        /* Add these cursor-related styles */
        .cm-layer {
            position: absolute;
            z-index: 150;
        }

        .cm-cursorLayer {
            animation-duration: 1200ms;
            animation-name: cm-blink;
            pointer-events: none;
        }

        .cm-cursor {
            border-left: 1px solid #0066cc;
            margin-left: -1px;
            position: absolute;
        }

        @keyframes cm-blink {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        /* Update cursor styles with higher specificity */
        .CodeMirror .CodeMirror-cursor {
            border-left: 2px solid rgba(0, 0, 0, 0.2) !important;
            /* black with 0.2 opacity */
        }

        .CodeMirror-focused .CodeMirror-cursor {
            border-left: 2px solid rgba(0, 0, 0, 0.2) !important;
        }

        /* Update these selection styles */
        .CodeMirror-selected {
            background-color: #b3d4fc !important;
            /* Light blue color */
        }

        .CodeMirror-focused .CodeMirror-selected {
            background-color: #b3d4fc !important;
        }

        .CodeMirror-line::selection,
        .CodeMirror-line>span::selection,
        .CodeMirror-line>span>span::selection {
            background-color: #b3d4fc !important;
        }

        .CodeMirror-line::-moz-selection,
        .CodeMirror-line>span::-moz-selection,
        .CodeMirror-line>span>span::-moz-selection {
            background-color: #b3d4fc !important;
        }

        /* Update matching bracket highlight */
        .CodeMirror-matchingbracket {
            background-color: #328c8252 !important;
            color: inherit !important;
            pointer-events: none;
        }

        /* Add non-matching bracket highlight */
        .CodeMirror-nonmatchingbracket {
            background-color: #bb555544 !important;
            color: inherit !important;
        }

        /* Add line wrapping styles */
        .CodeMirror-wrap pre.CodeMirror-line,
        .CodeMirror-wrap pre.CodeMirror-line-like {
            white-space: break-spaces;
            word-break: break-word;
            overflow-wrap: anywhere;
        }

        /* Add this to your existing <style> section */
        .submit-button {
            font-family: "Segoe UI", "Segoe UI Web (West European)", "Segoe UI", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", sans-serif;
            padding: 18px 16px;
            background-color: #36c;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .list-group {
            display: flex;
            flex-direction: column;
            width: 100%;
            text-align: start;
            border: 1px solid #ddd;
            margin-bottom: -1px;
            padding: 0;
            position: relative;
            background: white;
            border-radius: 4px;
        }

        button {
            cursor: pointer;
        }

        .ol-cm-toolbar-button .fa:before {
            content: "\f03e";
            /* Unicode for fa-upload */
        }

        .fa-upload:before {
            content: "\f093";
        }

        .fa-archive:before {
            content: "\f187";
        }

        .file-tree ul.file-tree-list li i.fa-folder,
        .file-tree ul.file-tree-list li i.fa-folder-open {
            color: #afb5c0;
            font-size: 14px;
        }

        .fa-globe:before {
            content: "\f0ac";
        }

        .ol-cm-toolbar-button-menu-popover>.popover-content,
        .ol-cm-toolbar-button-menu-popover>.popover-body {
            padding: 0;
            color: initial;
        }

        .fa {
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            display: inline-block;
            font: normal normal normal 14px / 1 FontAwesome;
            font-size: inherit;
            text-rendering: auto;
        }

        .fa-fw {
            text-align: center;
            width: 1.28571429em
        }

        .list-group {
            margin-bottom: 0;
            background-color: #2f3a4c;
            border-radius: 4px;
        }

        .list-group-item {
            width: 100%;
            text-align: start;
            display: flex;
            align-items: center;
            gap: 5px;
            color: #fff;
            border-color: #2f3a4c;
            background: none;
            border: 0px solid #ddd;
            margin-bottom: -1px;
            padding: 10px 15px;
            position: relative;
            font-size: 16px;
        }

        .list-group-item:hover {
            background-color: #3a4b5c;
            /* Slightly lighter than #2f3a4c */
        }

        .ol-cm-toolbar-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            background-color: transparent;
            border: none;
            border-radius: 0px;
            line-height: 1;
            width: 24px;
            height: 24px;
            overflow: hidden;
            color: inherit;
            border-left: 1px solid rgba(125, 125, 125, 0.3);
        }

        .ol-cm-toolbar-button:hover {
            background-color: #3a4b5c;
        }

        .ol-cm-toolbar-button i.fa {
            color: white;
            opacity: 0.8;
            font-size: 16px;
        }

        .ol-cm-toolbar-button {
            width: 28px;
            height: 28px;
            background-color: transparent;
        }

        .popover-content {
            opacity: 1.0;
        }

        .ol-cm-toolbar-button-menu-popover .list-group-item:first-child {
            border-top-left-radius: 3px;
            border-top-right-radius: 3px;
        }

        .ol-cm-toolbar-button-menu-popover .list-group-item:last-child {
            border-bottom-left-radius: 3px;
            border-bottom-right-radius: 3px;
            margin-bottom: 0;
        }

        .header-style {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 40px;
            background-color: #1b222c;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
            /* padding: 0 8px; */
            z-index: 1000;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }

        .post-title {
            color: #afb5c0;
            display: inline-block;
            font-weight: 700;
            overflow: hidden;
            padding: 6px;
            text-overflow: ellipsis;
            vertical-align: top;
            white-space: nowrap;
        }

        /* Add hover effect for any link in the header */
        .header-left a:hover {
            background-color: #2f3a4c !important;
        }
        .header-right a:hover {
            background-color: #4689d6 !important;
        }

        #save-button:hover {
            background-color: #1e6b41 !important;
            /* Darker green for hover effect */
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: #fefefe;
            padding: 20px;
            border: 1px solid #888;
            width: 600px;
            max-height: 70vh;
            overflow-y: auto;
            margin: 30px auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .image-list-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }

        .image-list-item:hover {
            background-color: #f5f5f5;
        }

        .image-thumbnail {
            width: 100px;
            height: 100px;
            object-fit: contain;
            margin-right: 20px;
        }

        .image-details {
            flex-grow: 1;
        }

        .image-name {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .image-dimensions {
            color: #666;
            font-size: 0.9em;
        }

        .ol-cm-toolbar-button-menu-popover {
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
            display: none;
            /* Ensure it's hidden initially */
        }

        .ol-cm-toolbar-button-menu-popover.show {
            opacity: 1;
            color: white;
            transform: translateY(0);
            display: block;
            /* Show when the class is added */
        }

        .ͼ4 .ol-cm-toolbar-button-menu-popover .list-group-item {
            width: 100%;
            text-align: start;
            display: flex;
            align-items: center;
            gap: 5px;
            background: none;
        }

        .ͼ4 .ol-cm-toolbar-button-menu-popover .list-group {
            margin-bottom: 0;
            background-color: var(--editor-toolbar-bg);
            border-radius: 4px;
        }

        .list-group-item {
            display: block;
            margin-bottom: -1px;
            padding: 10px 15px;
            position: relative;
        }

        .ol-cm-toolbar-button-math {
            font-family: "Noto Serif", serif;
            font-size: 18px;
            font-weight: 700;
            color: white;
            opacity: 0.8;
        }

        .symbol-palette-items {
            display: none;
            width: 50%;
            height: 30vh;
            position: absolute;
            bottom: 0;
            left: 0;
            background-color: #495365;
            overflow-y: auto;
            max-height: 30vh;
        }

        .symbol-palette-item {
            align-items: center;
            background: #2f3a4c;
            border: 1px solid transparent;
            border-radius: 3px;
            color: #fff;
            display: inline-flex;
            font-family: Stix Two Math, serif;
            font-size: 24px;
            height: 42px;
            justify-content: center;
            line-height: 42px;
            margin: 5px;
            width: 42px;
        }

        .symbol-palette-header-group {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 10px;
        }

        .symbol-palette-close-button-outer {
            margin-left: auto;
        }

        .symbol-palette-tab-list {
            display: flex;
            align-items: center;
            overflow-x: auto;
            max-width: 100%;
        }

        .symbol-palette-tab-list::-webkit-scrollbar {
            height: 8px;
        }

        .symbol-palette-tab-list::-webkit-scrollbar-thumb {
            background-color: #2f3a4c;
            border-radius: 4px;
        }

        .symbol-palette-tab-list::-webkit-scrollbar-track {
            background-color: #495365;
        }

        .symbol-palette-tab {
            margin-right: 10px;
            /* Optional: Add some space between buttons */
        }

        .symbol-palette-header-group {
            margin-left: auto;
            /* Pushes the close button to the right */
        }

        .symbol-palette-tab[role=tab][aria-selected=true] {
            background: #495365;
            color: #fff;
        }

        .symbol-palette-tab[role=tab] {
            -webkit-appearance: none;
            -moz-appearance: none;
            background: none;
            border: none;
            border-bottom: 1px solid transparent;
            color: #fff;
            background-color: #2f3a4c;
            cursor: pointer;
            display: inline-block;
            font: inherit;
            margin: 0;
            padding: .25em .5em;
        }

        .symbol-palette-close-button {
            background: transparent;
            color: #fff;
            float: none;
            font-size: 24px;
            font-weight: 700;
            line-height: 1;
            margin-left: 5px;
            opacity: 1;
            padding: 4px 10px;
            text-shadow: none;
            border: none;
        }

        .symbol-palette-close-button:hover {
            color: white;
        }
    </style>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Serif:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Stix+Two+Math&display=swap" rel="stylesheet">

</head>

<body>
    <header class="header-style">
        <div style="display: flex; align-items: center;" class="header-left">
            <a href="/" class="submit-button"
                style="background-color: #1b222c; color: #afb5c0; text-decoration: none; border-radius: 0;">
                <img class="mw-logo-wordmark" alt="Savchenko Solutions" src="/img/savchenko-wordmark-en-white.svg">
            </a>
        </div>
        <span class="post-title" style="flex-grow: 1; text-align: center;">
            <%= lang %>/<%= name %>
        </span>
        <div style="display: flex; align-items: center;" class="header-right">
            <a href="/<%= lang %>/<%= name %>" class="submit-button" 
                style="font-size: 16px; color: #fff; opacity: 0.9; background-color: #4a90e2; border-color: #4a90e2; border-radius: 1px; border-right: 1px solid #000; box-shadow: none; padding: 10px 18px; text-decoration: none; margin-left: 10px;">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M15 7H3.83L7.41 3.41L6 2L0 8L6 14L7.41 12.59L3.83 9H15V7Z" fill="currentColor" />
                </svg>
                <span>
                    <%= __('post.backLink') %>
                </span>
            </a>
            <form id="save-form" action="/<%= lang %>/save/<%= name %>" method="POST">
                <textarea id="hidden-content" name="content" style="display:none;"></textarea>
                <button id="save-button" class="submit-button"
                    style="font-size: 16px; color: #fff; opacity: 0.9; background-color: #007b0c; border-color: #6fae75; border-radius: 1px; box-shadow: none; padding: 10px 18px;">
                    <i class="fa fa-save" aria-hidden="true"></i>
                    <span>
                        <%= __('post.saveChanges') %>
                    </span>
                </button>
            </form>
        </div>
    </header>

    <div id="toolbar"
        style="position: fixed; top: 40px; left: 0; right: 0; height: 32px; background-color: #2f3a4c;display: flex; align-items: center; padding: 0 24px; z-index: 1000;">
        <button class="ol-cm-toolbar-button btn ol-cm-toolbar-button-math active" aria-label="Toggle Symbol Palette"
            type="button">Ω</button>
        <button type="button" class="ol-cm-toolbar-button btn" aria-label="Insert Figure">
            <i class="fa" aria-hidden="true"></i>
        </button>
    </div>

    <div class="ol-cm-toolbar-button-menu-popover"
        style="position: absolute; top: 90px; left: 24px; display: none; z-index: 1001; background-color: var(--editor-toolbar-bg); border-radius: 4px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
        <div class="popover-content">
            <div role="menu" class="list-group">
                <button type="button" id="upload-button" class="list-group-item"><i class="fa fa-upload fa-fw"
                        aria-hidden="true"></i>Upload from computer</button>
                <button type="button" class="list-group-item"><i class="fa fa-archive fa-fw" aria-hidden="true"></i>From
                    solution files</button>
                <!-- <button type="button" class="list-group-item"><i class="fa fa-folder-open fa-fw"
                        aria-hidden="true"></i>From another solution</button> -->
                <button type="button" class="list-group-item"><i class="fa fa-globe fa-fw" aria-hidden="true"></i>From
                    URL</button>
            </div>
        </div>
    </div>

    <div style="display: flex; padding-top: 22px; height: calc(100vh - 32px - 40px);">
        <div id="editor" style="width: 50%; height: 100%;"></div>
        <div id="resizer" style="width: 5px; height: 100%; background-color: #2f3a4c; cursor: ew-resize;"></div>
        <div id="preview"
            style="width: 50%; height: 100%; overflow-y: auto; background: #f9f9f9; word-break: break-word; padding: 1rem 3rem;">
        </div>
    </div>

    <div class="symbol-palette-items" role="listbox" aria-label="Symbols">
        <div role="tablist" aria-label="Symbol Categories" class="symbol-palette-tab-list">
            <button role="tab" type="button" class="symbol-palette-tab" id="symbol-palette-tab-Greek"
                aria-controls="symbol-palette-panel-Greek" aria-selected="true" tabindex="0">Greek</button>
            <button role="tab" type="button" class="symbol-palette-tab" id="symbol-palette-tab-Arrows"
                aria-controls="symbol-palette-panel-Arrows" aria-selected="false" tabindex="-1">Arrows</button>
            <button role="tab" type="button" class="symbol-palette-tab" id="symbol-palette-tab-Operators"
                aria-controls="symbol-palette-panel-Operators" aria-selected="false" tabindex="-1">Operators</button>
            <button role="tab" type="button" class="symbol-palette-tab" id="symbol-palette-tab-Relations"
                aria-controls="symbol-palette-panel-Relations" aria-selected="false" tabindex="-1">Relations</button>
            <button role="tab" type="button" class="symbol-palette-tab" id="symbol-palette-tab-Misc"
                aria-controls="symbol-palette-panel-Misc" aria-selected="false" tabindex="-1">Misc</button>

            <div class="symbol-palette-header-group">
                <div class="symbol-palette-close-button-outer">
                    <button class="close symbol-palette-close-button" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
            </div>
        </div>
        <div role="tabpanel" class="symbol-palette-panel" id="symbol-palette-panel-Greek"
            aria-labelledby="symbol-palette-tab-Greek" tabindex="0" style="display: block;">
            <button class="symbol-palette-item" tabindex="0" role="option" aria-label="Lowercase Greek letter alpha"
                aria-selected="true" data-command="\alpha">𝛼</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter beta"
                aria-selected="false" data-command="\beta">𝛽</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter gamma"
                aria-selected="false" data-command="\gamma">𝛾</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter delta"
                aria-selected="false" data-command="\delta">𝛿</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter epsilon"
                aria-selected="false" data-command="\varepsilon">𝜀</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter zeta"
                aria-selected="false" data-command="\zeta">𝜁</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter eta"
                aria-selected="false" data-command="\eta">𝜂</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter theta"
                aria-selected="false" data-command="\theta">𝜃</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter iota"
                aria-selected="false" data-command="\iota">𝜄</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter kappa"
                aria-selected="false" data-command="\kappa">𝜅</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter lambda"
                aria-selected="false" data-command="\lambda">𝜆</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter mu"
                aria-selected="false" data-command="\mu">𝜇</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter nu"
                aria-selected="false" data-command="\nu">𝜈</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter xi"
                aria-selected="false" data-command="\xi">𝜉</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter omicron"
                aria-selected="false" data-command="\omicron">𝜊</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter pi"
                aria-selected="false" data-command="\pi">𝜋</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter rho"
                aria-selected="false" data-command="\rho">𝜌</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter sigma"
                aria-selected="false" data-command="\sigma">𝜎</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter tau"
                aria-selected="false" data-command="\tau">𝜏</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter upsilon"
                aria-selected="false" data-command="\upsilon">𝜐</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter phi"
                aria-selected="false" data-command="\phi">𝜑</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter chi"
                aria-selected="false" data-command="\chi">𝜒</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter psi"
                aria-selected="false" data-command="\psi">𝜓</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Lowercase Greek letter omega"
                aria-selected="false" data-command="\omega">𝜔</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Gamma"
                aria-selected="false" data-command="\Gamma">Γ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Delta"
                aria-selected="false" data-command="\Delta">Δ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Theta"
                aria-selected="false" data-command="\Theta">Θ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Lambda"
                aria-selected="false" data-command="\Lambda">Λ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Xi"
                aria-selected="false" data-command="\Xi">Ξ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Pi"
                aria-selected="false" data-command="\Pi">Π</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Sigma"
                aria-selected="false" data-command="\Sigma">Σ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Upsilon"
                aria-selected="false" data-command="\Upsilon">Υ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Phi"
                aria-selected="false" data-command="\Phi">Φ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Psi"
                aria-selected="false" data-command="\Psi">Ψ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Uppercase Greek letter Omega"
                aria-selected="false" data-command="\Omega">Ω</button>
        </div>
        <div role="tabpanel" class="symbol-palette-panel" id="symbol-palette-panel-Arrows"
            aria-labelledby="symbol-palette-tab-Arrows" tabindex="0" style="display: none;">
            <button class="symbol-palette-item" tabindex="0" role="option" aria-label="Leftward arrow"
                aria-selected="true" data-command="\leftarrow">←</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Rightward arrow"
                aria-selected="false" data-command="\rightarrow">→</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Left and right arrow"
                aria-selected="false" data-command="\leftrightarrow">↔</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Upward arrow"
                aria-selected="false" data-command="\uparrow">↑</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Downward arrow"
                aria-selected="false" data-command="\downarrow">↓</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Is implied by"
                aria-selected="false" data-command="\Leftarrow">⇐</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Implies" aria-selected="false"
                data-command="\Rightarrow">⇒</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Left and right double arrow"
                aria-selected="false" data-command="\Leftrightarrow">⇔</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Maps to, rightward"
                aria-selected="false" data-command="\mapsto">↦</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="NE pointing arrow"
                aria-selected="false" data-command="\nearrow">↗</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="SE pointing arrow"
                aria-selected="false" data-command="\searrow">↘</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Right harpoon over left"
                aria-selected="false" data-command="\rightleftharpoons">⇌</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Left harpoon up"
                aria-selected="false" data-command="\leftharpoonup">↼</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Right harpoon up"
                aria-selected="false" data-command="\rightharpoonup">⇀</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Left harpoon down"
                aria-selected="false" data-command="\leftharpoondown">↽</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Right harpoon down"
                aria-selected="false" data-command="\rightharpoondown">⇁</button>
        </div>
        <div role="tabpanel" class="symbol-palette-panel" id="symbol-palette-panel-Operators"
            aria-labelledby="symbol-palette-tab-Operators" tabindex="0" style="display: none;">
            <button class="symbol-palette-item" tabindex="0" role="option" aria-label="Cross product, multiplication"
                aria-selected="true" data-command="\\times">×</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Division" aria-selected="false"
                data-command="\\div">÷</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Intersection"
                aria-selected="false" data-command="\\cap">∩</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Union" aria-selected="false"
                data-command="\\cup">∪</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Dot product, multiplication"
                aria-selected="false" data-command="\\cdot">⋅</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Centered dots"
                aria-selected="false" data-command="\\cdots">⋯</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Bullet" aria-selected="false"
                data-command="\\bullet">∙</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Circle" aria-selected="false"
                data-command="\\circ">◦</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Wedge, logical and"
                aria-selected="false" data-command="\\wedge">∧</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Vee, logical or"
                aria-selected="false" data-command="\\vee">∨</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Set minus, backslash"
                aria-selected="false" data-command="\\setminus">\\</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Plus sign in circle"
                aria-selected="false" data-command="\\oplus">⊕</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Multiply sign in circle"
                aria-selected="false" data-command="\\otimes">⊗</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Summation operator"
                aria-selected="false" data-command="\\sum">∑</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Product operator"
                aria-selected="false" data-command="\\prod">∏</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Intersection operator"
                aria-selected="false" data-command="\\bigcap">⋂</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Union operator"
                aria-selected="false" data-command="\\bigcup">⋃</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Integral operator"
                aria-selected="false" data-command="\\int">∫</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Double integral operator"
                aria-selected="false" data-command="\\iint">∬</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Triple integral operator"
                aria-selected="false" data-command="\\iiint">∭</button>
        </div>
        <div role="tabpanel" class="symbol-palette-panel" id="symbol-palette-panel-Relations"
            aria-labelledby="symbol-palette-tab-Relations" tabindex="0" style="display: none;">
            <button class="symbol-palette-item" tabindex="0" role="option" aria-label="Not equal" aria-selected="true"
                data-command="\neq">≠</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Less than or equal"
                aria-selected="false" data-command="\leq">≤</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Greater than or equal"
                aria-selected="false" data-command="\geq">≥</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Much less than"
                aria-selected="false" data-command="\ll">≪</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Much greater than"
                aria-selected="false" data-command="\gg">≫</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Precedes" aria-selected="false"
                data-command="\prec">≺</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Succeeds" aria-selected="false"
                data-command="\succ">≻</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Set membership"
                aria-selected="false" data-command="\in">∈</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Negated set membership"
                aria-selected="false" data-command="\notin">∉</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Contains" aria-selected="false"
                data-command="\ni">∋</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Subset" aria-selected="false"
                data-command="\subset">⊂</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Subset or equals"
                aria-selected="false" data-command="\subseteq">⊆</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Superset" aria-selected="false"
                data-command="\supset">⊃</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Similar" aria-selected="false"
                data-command="\sim">≃</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Approximate"
                aria-selected="false" data-command="\approx">≈</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Identical with"
                aria-selected="false" data-command="\equiv">≡</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Congruent with"
                aria-selected="false" data-command="\cong">≅</button>
            <button class="symbol-palette-item" tabindex="-1" role="option"
                aria-label="Mid, divides, vertical bar, modulus, absolute value" aria-selected="false"
                data-command="\mid">∣</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Negated mid, not divides"
                aria-selected="false" data-command="\nmid">∤</button>
            <button class="symbol-palette-item" tabindex="-1" role="option"
                aria-label="Parallel, double vertical bar, norm" aria-selected="false"
                data-command="\parallel">∥</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Perpendicular"
                aria-selected="false" data-command="\perp">⟂</button>
        </div>
        <div role="tabpanel" class="symbol-palette-panel" id="symbol-palette-panel-Misc"
            aria-labelledby="symbol-palette-tab-Misc" tabindex="0" style="display: none;">
            <button class="symbol-palette-item" tabindex="0" role="option" aria-label="Infinity" aria-selected="true"
                data-command="\infty">∞</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Partial differential"
                aria-selected="false" data-command="\partial">𝜕</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Nabla, del, hamilton operator"
                aria-selected="false" data-command="\nabla">∇</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Empty set" aria-selected="false"
                data-command="\emptyset">⌀</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="For all" aria-selected="false"
                data-command="\forall">∀</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="There exists"
                aria-selected="false" data-command="\exists">∃</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Not sign" aria-selected="false"
                data-command="\neg">¬</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Real part" aria-selected="false"
                data-command="\Re">ℜ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Imaginary part"
                aria-selected="false" data-command="\Im">ℑ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Square" aria-selected="false"
                data-command="\square">□</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Triangle" aria-selected="false"
                data-command="\triangle">△</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Hebrew letter aleph"
                aria-selected="false" data-command="\aleph">ℵ</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Weierstrass letter p"
                aria-selected="false" data-command="\wp">℘</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Number sign, hashtag"
                aria-selected="false" data-command="\#">#</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Dollar sign"
                aria-selected="false" data-command="\$">$</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Percent sign"
                aria-selected="false" data-command="\%">%</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Et sign, and, ampersand"
                aria-selected="false" data-command="\&">&amp;</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Left curly brace"
                aria-selected="false" data-command="\{">{</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Right curly brace"
                aria-selected="false" data-command="\}">}</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Left angle bracket, bra"
                aria-selected="false" data-command="\langle">⟨</button>
            <button class="symbol-palette-item" tabindex="-1" role="option" aria-label="Right angle bracket, ket"
                aria-selected="false" data-command="\rangle">⟩</button>
        </div>
    </div>

    <form id="upload-form" action="/upload-image/<%= name %>" method="POST" enctype="multipart/form-data"
        style="display: none;">
        <input type="file" name="image" id="file-input" accept="image/*">
    </form>

    <div id="imageModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="imageModalLabel">Uploaded images of <%= name %>
            </h2>
            <div id="imageList"></div>
        </div>
    </div>

    <div id="urlModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close-url-modal close">&times;</span>
            <h2>Enter URL</h2>
            <input type="text" id="urlInput" placeholder="Enter URL here"
                style="width: 100%; padding: 8px; margin-bottom: 10px;">
            <button id="insertUrlButton" class="submit-button" style="width: 100%;">Insert URL</button>
        </div>
    </div>

    <script>
        // Define custom mixed mode for Markdown + LaTeX
        CodeMirror.defineMode("markdown-latex", function (config) {
            const markdownMode = CodeMirror.getMode(config, "markdown");

            // Helper function to handle LaTeX commands
            function handleLatexCommand(stream) {
                if (stream.match(/^\\[a-zA-Z]+/)) {
                    return "math-command";
                }
                return null;
            }

            // Helper function to handle brackets in math mode
            function handleBrackets(stream) {
                if (stream.match(/[{}]/)) {
                    return "math-bracket";  // New token type for brackets in math mode
                }
                return null;
            }

            return CodeMirror.multiplexingMode(markdownMode, {
                open: "$$", close: "$$",
                mode: {
                    token: function (stream, state) {
                        // Check for brackets first
                        const bracket = handleBrackets(stream);
                        if (bracket) return bracket;

                        // Check for LaTeX commands
                        const command = handleLatexCommand(stream);
                        if (command) return command;

                        if (stream.match(/^.*?\$\$/)) {
                            return "math";
                        }
                        stream.next();
                        return "math";
                    }
                },
                delimStyle: "delim"
            }, {
                open: "$", close: "$",
                mode: {
                    token: function (stream, state) {
                        // Check for brackets first
                        const bracket = handleBrackets(stream);
                        if (bracket) return bracket;

                        // Check for LaTeX commands
                        const command = handleLatexCommand(stream);
                        if (command) return command;

                        if (stream.match(/^.*?\$/)) {
                            return "math";
                        }
                        stream.next();
                        return "math";
                    }
                },
                delimStyle: "delim"
            });
        });

        const editor = CodeMirror(document.getElementById('editor'), {
            value: `<%- content.replace(/\\/g, '\\\\').replace(/\$/g, '\\$') %>`,
            mode: 'markdown-latex',
            lineNumbers: true,
            lineWrapping: true,
            theme: 'neat',
            viewportMargin: Infinity,
            styleActiveLine: true,
            matchBrackets: true,
            autoCloseBrackets: true
        });

        const preview = document.getElementById('preview');
        const resizer = document.getElementById('resizer');

        // Render Markdown and LaTeX
        function renderPreview(content) {
            let html = window.marked.parse(transformImageMarkdown(content.replace(/;/g, "\\;").replace(/,/g, "\\,").replace(/\*/g, "\\*").replace(/~/g, "\\~")));
            // Apply custom image and YouTube transformations
            html = html.replace(/<em>/g, "_").replace(/<\/em>/g, "_");
            html = html.replace(/\\\*/g, "*");
            preview.innerHTML = html;
            MathJax.Hub.Queue(["Typeset", MathJax.Hub, preview]);
        }

        // Add the transformImageMarkdown function
        function transformImageMarkdown(htmlContent) {
            // Regular expression for YouTube URL format
            const youtubeRegex = /!\[\]\((https:\/\/www\.youtube\.com\/embed\/[a-zA-Z0-9_-]+(\?t=\d+)?)\)/g;

            // Replace YouTube URL format with video container HTML
            htmlContent = htmlContent.replace(youtubeRegex, (match, youtubeUrl) => {
                return `<div class="video-container">
                            <iframe allowfullscreen="" class="video" frameborder="0" src="${youtubeUrl}"></iframe>
                        </div>`;
            });

            // Regular expression for custom image markdown
            const regex = /!\[(.*?)?\|(.*?x.*?)?,?(\d+%)?\]\(\.\.\/\.\.\/img\/(.*?)\/(.*?)\)/g;

            return htmlContent.replace(regex, (match, altText = "", dimensions, scale, folder, filename) => {
                let width = "auto", height = "auto";
                let scalePercentage = "100%";

                if (dimensions) {
                    const [w, h] = dimensions.split("x");
                    width = w ? `${w}px` : "auto";
                    height = h ? `${h.replace("\\, ", "")}px` : "auto";
                }
                if (scale) {
                    scalePercentage = scale;
                }

                return `<center>
              <figure>
                <img src="..\\..\\img\\${folder}\\${filename}"
                  loading="lazy" alt="${altText}" width="${scalePercentage}" style="max-width:${width}; max-height:${height};" />
                <figcaption>${altText}</figcaption>
              </figure>
              </center>`;
            });
        }

        // Initial render
        renderPreview(editor.getValue());

        // Live preview update
        editor.on('change', () => {
            renderPreview(editor.getValue());
        });

        // Resizable divider logic
        let isResizing = false;

        resizer.addEventListener('mousedown', (e) => {
            isResizing = true;
            document.body.style.cursor = 'col-resize';
        });

        document.addEventListener('mousemove', (e) => {
            if (!isResizing) return;

            const totalWidth = window.innerWidth;
            const editorWidth = e.clientX;

            if (editorWidth > 100 && editorWidth < totalWidth - 100) {
                const previewWidth = totalWidth - editorWidth - 5; // 5px resizer width
                document.getElementById('editor').style.width = `${editorWidth}px`;
                document.getElementById('preview').style.width = `${previewWidth}px`;

                // Update symbol palette width to match editor width
                document.querySelector('.symbol-palette-items').style.width = `${editorWidth}px`;
            }
        });

        document.addEventListener('mouseup', () => {
            if (isResizing) {
                isResizing = false;
                document.body.style.cursor = 'default';
            }
        });

        // Add save functionality
        document.getElementById('save-button').addEventListener('click', () => {
            // Get current content from editor
            const content = editor.getValue();

            // Update hidden textarea
            document.getElementById('hidden-content').value = content;

            // Submit the form
            document.getElementById('save-form').submit();
        });

        // Add keyboard shortcut (Ctrl/Cmd + S)
        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault(); // Prevent browser's save dialog
                document.getElementById('save-button').click();
            }
        });

        let hasUnsavedChanges = false;

        // Track changes in the editor
        editor.on('change', () => {
            hasUnsavedChanges = true;
        });

        // Reset changes flag when saving
        document.getElementById('save-button').addEventListener('click', () => {
            hasUnsavedChanges = false;
        });

        // Add click handler to the Go Back button
        document.querySelector('a[href="/<%= lang %>/<%= name %>"]').addEventListener('click', (e) => {
            if (hasUnsavedChanges) {
                e.preventDefault();
                if (confirm('<%= __('post.unsavedChanges') %>')) {
                    window.location.href = '/<%= lang %>/<%= name %>';
                }
            }
        });

        // Handle browser navigation (optional, for better coverage)
        window.addEventListener('beforeunload', (e) => {
            if (hasUnsavedChanges) {
                e.preventDefault();
                e.returnValue = '';
                return '';
            }
        });


        // Add functionality to insert image markdown
        document.querySelectorAll('.list-group-item').forEach(item => {
            item.addEventListener('click', function () {
                // Hide the popover after an item is clicked
                document.querySelector('.ol-cm-toolbar-button-menu-popover').style.display = 'none';
            });
        });

        // Add event listener to the button to trigger file input
        document.getElementById('upload-button').addEventListener('click', function () {
            document.getElementById('file-input').click();
        });

        // Use AJAX to submit the form when a file is selected
        document.getElementById('file-input').addEventListener('change', function () {
            if (this.files.length > 0) { // Check if a file is selected
                const formData = new FormData(document.getElementById('upload-form'));
                const xhr = new XMLHttpRequest();
                xhr.open('POST', document.getElementById('upload-form').action, true);

                xhr.onload = function () {
                    if (xhr.status === 200) {
                        // Parse the JSON response
                        const response = JSON.parse(xhr.responseText);

                        // Extract image path and dimensions
                        const imagePath = response.imagePath;
                        const width = response.width;
                        const height = response.height;

                        // Use the actual dimensions in the markdown
                        const markdown = `![For problem <%= name %>|${width}x${height}, 50%](../..${imagePath})`;
                        editor.replaceSelection(markdown);

                        // Reset file input to allow re-uploading the same file
                        document.getElementById('file-input').value = '';
                    } else {
                        alert('Failed to upload image.');
                    }
                };

                xhr.send(formData);
            }
        });

        document.querySelector('.fa-archive').parentElement.addEventListener('click', function () {
            const modal = document.getElementById('imageModal');
            const imageList = document.getElementById('imageList');
            const name = '<%= name %>';

            fetch(`/img/${name}`)
                .then(response => response.json())
                .then(images => {
                    imageList.innerHTML = ''; // Clear existing content

                    images.forEach(image => {
                        // Create a temporary image to get dimensions
                        const img = new Image();
                        img.src = `/img/${name}/${image}`;

                        img.onload = function () {
                            const listItem = document.createElement('div');
                            listItem.className = 'image-list-item';
                            listItem.onclick = () => insertImageMarkdown(image);

                            listItem.innerHTML = `
                                <img src="/img/${name}/${image}" class="image-thumbnail" alt="${image}">
                                <div class="image-details">
                                    <div class="image-name">${image}</div>
                                    <div class="image-dimensions">${this.width} × ${this.height} pixels</div>
                                    <div class="image-size">Loading size...</div>
                                </div>
                            `;

                            // Get file size
                            fetch(`/img/${name}/${image}`)
                                .then(response => {
                                    const size = response.headers.get('content-length');
                                    const sizeInKB = (size / 1024).toFixed(2);
                                    listItem.querySelector('.image-size').textContent = `${sizeInKB} KB`;
                                });

                            imageList.appendChild(listItem);
                        };
                    });
                    modal.style.display = 'block';
                })
                .catch(error => console.error('Error fetching images:', error));
        });

        document.querySelectorAll('.close').forEach(button => {
            button.addEventListener('click', function () {
                // Find the closest modal and hide it
                const modal = this.closest('.modal');
                if (modal) {
                    modal.style.display = 'none';
                }
            });
        });

        // Close the modal when clicking outside of it
        window.addEventListener('click', function (event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });

        function insertImageMarkdown(image) {
            const name = '<%= name %>';
            const imageElement = new Image();
            imageElement.src = `/img/${name}/${image}`;

            imageElement.onload = function () {
                const width = this.width;
                const height = this.height;
                const scale = '50%'; // Example scale

                const markdown = `![${image}|${width}x${height}, ${scale}](../../img/${name}/${image})`;
                editor.replaceSelection(markdown);
                document.getElementById('imageModal').style.display = 'none';
            };
        }

        // Show the URL modal when the "From URL" button is clicked
        document.querySelector('.fa-globe').parentElement.addEventListener('click', function () {
            document.getElementById('urlModal').style.display = 'block';
        });

        // Close the URL modal
        document.querySelector('.close-url-modal').onclick = function () {
            document.getElementById('urlModal').style.display = 'none';
        };

        // Insert the URL into the editor
        document.getElementById('insertUrlButton').addEventListener('click', function () {
            let url = document.getElementById('urlInput').value;
            if (url) {
                // Add https:// if the URL doesn't start with http:// or https://
                if (!/^https?:\/\//i.test(url)) {
                    url = 'https://' + url;
                }
                const markdown = `![For problem <%= name %>|123x456, 50%](${url})`;
                editor.replaceSelection(markdown);
                document.getElementById('urlModal').style.display = 'none';
                document.getElementById('urlInput').value = ''; // Clear the input field
            } else {
                alert('Please enter a valid URL.');
            }
        });

        // Close the modal when clicking outside of it
        window.addEventListener('click', function (event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });

        // Function to adjust editor height
        function adjustEditorHeight() {
            const symbolPalette = document.querySelector('.symbol-palette-items');
            const editor = document.getElementById('editor');
            const observer = new MutationObserver(() => {
                if (symbolPalette.style.display === 'block') {
                    editor.style.height = 'calc(100% - 30vh)'; // Reduce height by the symbol palette's height
                } else {
                    editor.style.height = '100%'; // Reset to full height
                }
            });

            // Observe changes to the 'style' attribute of the symbol palette
            observer.observe(symbolPalette, { attributes: true, attributeFilter: ['style'] });
        }

        // Call adjustEditorHeight once to set up the observer
        adjustEditorHeight();

        // Toggle symbol palette visibility
        document.querySelector('.ol-cm-toolbar-button-math').addEventListener('click', function () {
            const symbolPalette = document.querySelector('.symbol-palette-items');
            if (symbolPalette.style.display === 'none' || symbolPalette.style.display === '') {
                symbolPalette.style.display = 'block';
            } else {
                symbolPalette.style.display = 'none';
            }
            adjustEditorHeight(); // Adjust editor height when toggling
        });

        // Toggle popover visibility for Insert Figure button
        document.querySelector('.ol-cm-toolbar-button[aria-label="Insert Figure"]').addEventListener('click', function () {
            const popover = document.querySelector('.ol-cm-toolbar-button-menu-popover');
            if (popover.classList.contains('show')) {
                popover.classList.remove('show');
                setTimeout(() => popover.style.display = 'none', 300); // Wait for transition to complete
            } else {
                popover.style.display = 'block';
                setTimeout(() => popover.classList.add('show'), 10); // Slight delay to trigger transition
            }
        });

        // Add event listeners to symbol palette items
        document.querySelectorAll('.symbol-palette-item').forEach(button => {
            button.addEventListener('click', function () {
                const command = this.getAttribute('data-command');
                if (command) {
                    editor.replaceSelection(command);
                }
            });
        });

        // Add event listener to the close button in the symbol palette
        document.querySelector('.symbol-palette-close-button').addEventListener('click', function () {
            document.querySelector('.symbol-palette-items').style.display = 'none';
        });

        document.querySelectorAll('.symbol-palette-tab').forEach(tab => {
            tab.addEventListener('click', function () {
                // Deselect all tabs and hide all panels
                document.querySelectorAll('.symbol-palette-tab').forEach(t => {
                    t.setAttribute('aria-selected', 'false');
                    t.setAttribute('tabindex', '-1');
                });
                document.querySelectorAll('.symbol-palette-panel').forEach(panel => {
                    panel.style.display = 'none';
                });

                // Select the clicked tab and show the corresponding panel
                this.setAttribute('aria-selected', 'true');
                this.setAttribute('tabindex', '0');
                const panelId = this.getAttribute('aria-controls');
                document.getElementById(panelId).style.display = 'block';
            });
        });

        // Initialize by showing the first tab and panel
        document.querySelector('.symbol-palette-tab[aria-selected="true"]').click();
    </script>

</body>

</html>